"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSvelteCompileWarnings = void 0;
const module_1 = __importDefault(require("module"));
const path_1 = __importDefault(require("path"));
const compiler = __importStar(require("svelte/compiler"));
const sourcemap_codec_1 = require("sourcemap-codec");
const lines_and_columns_1 = require("../utils/lines-and-columns");
function getSvelteCompileWarnings(context, option) {
    var _a, _b;
    const sourceCode = context.getSourceCode();
    const text = !option.removeComments
        ? sourceCode.text
        : (() => {
            let code = "";
            let start = 0;
            for (const token of [...option.removeComments].sort((a, b) => a.range[0] - b.range[0])) {
                code +=
                    sourceCode.text.slice(start, token.range[0]) +
                        sourceCode.text.slice(...token.range).replace(/[^\t\n\r ]/g, " ");
                start = token.range[1];
            }
            code += sourceCode.text.slice(start);
            return code;
        })();
    if (!context.parserServices.esTreeNodeToTSNodeMap) {
        return getWarningsFromCode(text, option);
    }
    let ts;
    try {
        const createRequire = module_1.default.createRequire ||
            module_1.default.createRequireFromPath;
        const cwd = (_b = (_a = context.getCwd) === null || _a === void 0 ? void 0 : _a.call(context)) !== null && _b !== void 0 ? _b : process.cwd();
        const relativeTo = path_1.default.join(cwd, "__placeholder__.js");
        ts = createRequire(relativeTo)("typescript");
    }
    catch (_c) {
        return [];
    }
    class RemapContext {
        constructor() {
            this.originalStart = 0;
            this.code = "";
            this.locs = null;
            this.mapIndexes = [];
        }
        appendOriginal(endIndex) {
            const codeStart = this.code.length;
            const start = this.originalStart;
            this.code += text.slice(start, endIndex);
            this.originalStart = endIndex;
            const offset = start - codeStart;
            this.mapIndexes.push({
                range: [codeStart, this.code.length],
                remap(index) {
                    return index + offset;
                },
            });
        }
        postprocess() {
            this.appendOriginal(text.length);
            return this.code;
        }
        appendTranspile(endIndex) {
            const codeStart = this.code.length;
            const start = this.originalStart;
            const inputText = text.slice(start, endIndex);
            const output = ts.transpileModule(inputText, {
                reportDiagnostics: false,
                compilerOptions: {
                    target: ts.ScriptTarget.ESNext,
                    importsNotUsedAsValues: ts.ImportsNotUsedAsValues.Preserve,
                    sourceMap: true,
                },
                transformers: {
                    before: [createTsImportTransformer(ts)],
                },
            });
            const outputText = `${output.outputText}\n`;
            this.code += outputText;
            this.originalStart = endIndex;
            let outputLocs = null;
            let inputLocs = null;
            let decoded = null;
            this.mapIndexes.push({
                range: [codeStart, this.code.length],
                remap: (index) => {
                    outputLocs = outputLocs !== null && outputLocs !== void 0 ? outputLocs : new lines_and_columns_1.LinesAndColumns(outputText);
                    inputLocs = inputLocs !== null && inputLocs !== void 0 ? inputLocs : new lines_and_columns_1.LinesAndColumns(inputText);
                    const outputCodePos = outputLocs.getLocFromIndex(index - codeStart);
                    const inputCodePos = remapPosition(outputCodePos);
                    return inputLocs.getIndexFromLoc(inputCodePos) + start;
                },
            });
            function remapPosition(pos) {
                decoded = decoded !== null && decoded !== void 0 ? decoded : (0, sourcemap_codec_1.decode)(JSON.parse(output.sourceMapText).mappings);
                const lineMaps = decoded[pos.line - 1];
                if (!(lineMaps === null || lineMaps === void 0 ? void 0 : lineMaps.length)) {
                    for (let line = pos.line - 1; line >= 0; line--) {
                        const prevLineMaps = decoded[line];
                        if (prevLineMaps === null || prevLineMaps === void 0 ? void 0 : prevLineMaps.length) {
                            const [, , sourceCodeLine, sourceCodeColumn] = prevLineMaps[prevLineMaps.length - 1];
                            return {
                                line: sourceCodeLine + 1,
                                column: sourceCodeColumn,
                            };
                        }
                    }
                    return { line: -1, column: -1 };
                }
                for (let index = 0; index < lineMaps.length - 1; index++) {
                    const [generateCodeColumn, , sourceCodeLine, sourceCodeColumn] = lineMaps[index];
                    if (generateCodeColumn <= pos.column &&
                        pos.column < lineMaps[index + 1][0]) {
                        return {
                            line: sourceCodeLine + 1,
                            column: sourceCodeColumn + (pos.column - generateCodeColumn),
                        };
                    }
                }
                const [generateCodeColumn, , sourceCodeLine, sourceCodeColumn] = lineMaps[lineMaps.length - 1];
                return {
                    line: sourceCodeLine + 1,
                    column: sourceCodeColumn + (pos.column - generateCodeColumn),
                };
            }
        }
        remapLocs(points) {
            var _a;
            const mapIndexes = this.mapIndexes;
            const locs = (this.locs = (_a = this.locs) !== null && _a !== void 0 ? _a : new lines_and_columns_1.LinesAndColumns(this.code));
            let start = undefined;
            let end = undefined;
            if (points.start) {
                const index = locs.getIndexFromLoc(points.start);
                const remapped = remapIndex(index);
                if (remapped) {
                    start = sourceCode.getLocFromIndex(remapped);
                }
            }
            if (points.end) {
                const index = locs.getIndexFromLoc(points.end);
                const remapped = remapIndex(index - 1);
                if (remapped) {
                    end = sourceCode.getLocFromIndex(remapped + 1);
                }
            }
            return { start, end };
            function remapIndex(index) {
                for (const mapIndex of mapIndexes) {
                    if (mapIndex.range[0] <= index && index < mapIndex.range[1]) {
                        return mapIndex.remap(index);
                    }
                }
                return null;
            }
        }
    }
    const remapContext = new RemapContext();
    const root = sourceCode.ast;
    for (const node of root.body) {
        if (node.type === "SvelteScriptElement") {
            if (node.endTag) {
                remapContext.appendOriginal(node.startTag.range[1]);
                remapContext.appendTranspile(node.endTag.range[0]);
            }
        }
    }
    const code = remapContext.postprocess();
    const baseWarnings = getWarningsFromCode(code, option);
    if (!baseWarnings) {
        return null;
    }
    const warnings = [];
    for (const warn of baseWarnings) {
        let loc = null;
        const getLoc = function getLoc() {
            if (loc) {
                return loc;
            }
            return (loc = remapContext.remapLocs(warn));
        };
        warnings.push({
            code: warn.code,
            message: warn.message,
            get start() {
                return getLoc().start;
            },
            get end() {
                return getLoc().end;
            },
        });
    }
    return warnings;
}
exports.getSvelteCompileWarnings = getSvelteCompileWarnings;
function getWarningsFromCode(code, { warnings }) {
    const ignoreWarnings = warnings === "ignoreWarnings";
    const onlyWarnings = warnings === "onlyWarnings";
    try {
        const result = compiler.compile(code, {
            generate: false,
        });
        if (ignoreWarnings) {
            return [];
        }
        return result.warnings;
    }
    catch (e) {
        if (onlyWarnings) {
            return null;
        }
        if (!ignoreWarnings) {
            try {
                const result = compiler.compile(code, {
                    generate: false,
                    errorMode: "warn",
                });
                return result.warnings;
            }
            catch (_a) {
            }
        }
        return [
            {
                code: e.code,
                message: e.message,
                start: e.start,
                end: e.end,
            },
        ];
    }
}
function createTsImportTransformer(ts) {
    const factory = ts.factory;
    return (context) => {
        function visit(node) {
            if (ts.isImportDeclaration(node)) {
                if (node.importClause && node.importClause.isTypeOnly) {
                    return factory.createEmptyStatement();
                }
                return factory.createImportDeclaration(node.decorators, node.modifiers, node.importClause, node.moduleSpecifier);
            }
            return ts.visitEachChild(node, (child) => visit(child), context);
        }
        return (node) => ts.visitNode(node, visit);
    };
}
