"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("../utils");
const svelte_compile_warns_1 = require("../shared/svelte-compile-warns");
exports.default = (0, utils_1.createRule)("valid-compile", {
    meta: {
        docs: {
            description: "disallow warnings when compiling.",
            category: "Possible Errors",
            recommended: true,
        },
        schema: [
            {
                type: "object",
                properties: {
                    ignoreWarnings: { type: "boolean" },
                },
                additionalProperties: false,
            },
        ],
        messages: {},
        type: "problem",
    },
    create(context) {
        var _a;
        if (!context.parserServices.isSvelte) {
            return {};
        }
        const ignoreWarnings = Boolean((_a = context.options[0]) === null || _a === void 0 ? void 0 : _a.ignoreWarnings);
        const ignores = ["missing-declaration", "dynamic-slot-name"];
        function report(warnings) {
            for (const warn of warnings) {
                if (warn.code && ignores.includes(warn.code)) {
                    continue;
                }
                context.report({
                    loc: {
                        start: warn.start || warn.end || { line: 1, column: 0 },
                        end: warn.end || warn.start || { line: 1, column: 0 },
                    },
                    message: `${warn.message}${warn.code ? `(${warn.code})` : ""}`,
                });
            }
        }
        return {
            "Program:exit"() {
                report((0, svelte_compile_warns_1.getSvelteCompileWarnings)(context, {
                    warnings: ignoreWarnings ? "ignoreWarnings" : null,
                }));
            },
        };
    },
});
