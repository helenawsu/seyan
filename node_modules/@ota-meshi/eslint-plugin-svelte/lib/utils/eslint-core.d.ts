import type { RuleListener, RuleContext, RuleModule } from "../types";
import type * as ESTree from "estree";
import type { AST as SvAST } from "svelte-eslint-parser";
export declare function defineWrapperListener(coreRule: RuleModule, context: RuleContext, proxyOptions: {
    createListenerProxy?: (listener: RuleListener) => RuleListener;
}): RuleListener;
export declare function getProxyNode(node: {
    type: string;
}, properties: any): any;
export declare function buildProxyListener(base: RuleListener, convertNode: (node: SvAST.SvelteNode | (ESTree.Node & {
    parent: SvAST.SvelteNode | ESTree.Node | null;
})) => any): RuleListener;
export declare function getCoreRule(ruleName: string): RuleModule;
