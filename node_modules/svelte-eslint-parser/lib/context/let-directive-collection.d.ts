import type { SvelteLetDirective, SvelteName, SvelteNode } from "../ast";
import type * as ESTree from "estree";
import type { ScriptLetCallback, ScriptLetCallbackOption } from "./script-let";
/** A class that collects pattern nodes for Let directives. */
export declare class LetDirectiveCollection {
    private readonly list;
    isEmpty(): boolean;
    getLetParams(): (ESTree.Pattern | SvelteName)[];
    getParents(): SvelteNode[];
    getCallback(): (nodes: ESTree.Pattern[], options: ScriptLetCallbackOption) => void;
    getTypes(): string[];
    addPattern(pattern: ESTree.Pattern | SvelteName, directive: SvelteLetDirective, typing: string, ...callbacks: ScriptLetCallback<ESTree.Pattern>[]): ScriptLetCallback<ESTree.Pattern>[];
}
export declare class LetDirectiveCollections {
    private readonly stack;
    beginExtract(): void;
    getCollection(): LetDirectiveCollection;
    extract(): LetDirectiveCollection;
}
